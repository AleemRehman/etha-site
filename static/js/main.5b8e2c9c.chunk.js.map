{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","xmlns","viewBox","preserveAspectRatio","width","height","version","fill","stroke","transform","d","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,0GCsB5BC,MAlBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,kBAChB,yBAAKC,MAAM,6BAA6BC,QAAQ,cAAcC,oBAAoB,gBAAgBC,MAAM,QAAQC,OAAO,QAAQC,QAAQ,OACvI,uBAAGC,KAAK,UAAUC,OAAO,OAAOC,UAAU,oCACxC,0BAAMC,EAAE,0WACR,0BAAMA,EAAE,sbACR,0BAAMA,EAAE,8fACR,0BAAMA,EAAE,8iBACR,0BAAMA,EAAE,gJCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5b8e2c9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"app-background\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 800 800\" preserveAspectRatio=\"xMidYMid meet\" width=\"400px\" height=\"400px\" version=\"1.0\">\n        <g fill=\"#000000\" stroke=\"none\" transform=\"translate(0 800) scale(0.1 -0.1)\">\n          <path d=\"M 3655 4823 c -47 -12 -45 16 -45 -759 l 0 -733 l 38 -12 c 50 -15 194 -8 215 10 c 15 12 17 49 17 346 l 0 332 l 60 57 c 32 31 75 63 94 71 c 81 34 156 7 196 -71 l 25 -48 l 3 -343 l 3 -343 l 38 -11 c 50 -15 193 -8 214 10 c 15 12 17 50 17 365 c 0 387 -7 448 -58 540 c -97 172 -348 206 -527 71 l -60 -45 l -3 269 c -2 230 -5 271 -18 282 c -16 13 -171 23 -209 12 Z\" />\n          <path d=\"M 2925 4613 c -38 -9 -45 -32 -45 -145 l 0 -108 l -65 0 c -79 0 -85 -8 -85 -110 c 0 -101 7 -110 84 -110 l 64 0 l 4 -307 c 4 -269 7 -315 24 -363 c 43 -125 158 -189 321 -177 c 103 7 158 29 172 69 c 12 35 14 99 5 148 c -7 31 -8 32 -43 26 c -91 -17 -112 -18 -142 -6 c -55 23 -59 49 -59 345 l 0 265 l 109 0 c 134 0 136 2 136 110 c 0 108 -2 110 -136 110 l -109 0 l 0 108 c 0 59 -4 112 -8 119 c -14 21 -62 33 -135 32 c -40 -1 -81 -3 -92 -6 Z\" />\n          <path d=\"M 2055 4378 c -172 -33 -307 -172 -356 -368 c -18 -72 -18 -297 0 -370 c 43 -174 138 -275 306 -326 c 91 -28 304 -26 408 4 c 93 27 152 55 161 77 c 3 9 6 50 6 91 c 0 58 -3 76 -15 80 c -9 4 -59 -9 -113 -27 c -87 -29 -109 -33 -212 -33 c -127 -1 -155 8 -218 67 c -34 33 -62 106 -62 164 l 0 33 l 309 0 c 368 0 353 -5 359 107 c 12 204 -69 381 -207 457 c -92 49 -243 68 -366 44 Z m 202 -197 c 25 -12 52 -35 67 -58 c 25 -39 30 -55 40 -130 l 6 -43 l -205 0 l -205 0 l 0 23 c 0 43 30 126 57 158 c 55 65 158 87 240 50 Z\" />\n          <path d=\"M 5071 4379 c -111 -22 -227 -73 -260 -115 c -32 -41 -25 -155 11 -178 c 13 -7 35 -1 95 27 c 109 51 192 70 276 64 c 111 -7 157 -58 157 -173 l 0 -61 l -137 -6 c -260 -12 -381 -64 -444 -193 c -30 -60 -31 -69 -27 -151 c 4 -69 10 -99 31 -139 c 98 -192 412 -221 590 -56 l 27 26 l 0 -37 c 0 -59 26 -77 109 -77 c 38 0 82 4 96 10 l 26 10 l -3 402 c -3 389 -4 405 -26 458 c -26 66 -88 131 -152 159 c -85 37 -260 52 -369 30 Z m 279 -697 l 0 -88 l -37 -36 c -73 -71 -168 -95 -239 -62 c -43 21 -67 65 -68 125 c 0 59 30 102 87 123 c 60 22 72 24 170 25 l 87 1 l 0 -88 Z\" />\n          <path d=\"M 5970 3637 c -51 -17 -70 -62 -70 -162 c 0 -133 45 -173 183 -163 c 72 5 107 30 125 89 c 16 54 9 162 -14 196 c -31 49 -141 68 -224 40 Z\" />\n        </g>\n        </svg>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}